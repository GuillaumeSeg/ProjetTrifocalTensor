#include <iostream>
#include <vector>

#include "../Eigen/Dense"
#include "../include/MatrixA.hpp"

	using namespace Eigen;

Eigen::VectorXd transfert(Tensor &t, Eigen::VectorXd &xa, Eigen::VectorXd &xb, int imageDontOnRechercheLePoint) {
	
	
	MatrixXd G = MatrixXd::Zero(4, 3);
	
	if(imageDontOnRechercheLePoint == 3) {
	
		for(int k = 0; k < 3; ++k) {
			
			G(0,0) += -xa[k]*xb[0]*t(3,3,k+1) + xa[k]*xb[2]*t(1,3,k+1);
			G(1,0) += -xa[k]*xb[1]*t(3,3,k+1) + xa[k]*xb[2]*t(2,3,k+1);
			
			G(2,1) += -xa[k]*xb[0]*t(3,3,k+1) + xa[k]*xb[2]*t(1,3,k+1);
			G(3,1) += -xa[k]*xb[1]*t(3,3,k+1) + xa[k]*xb[2]*t(2,3,k+1);
			
			G(0,2) += xa[k]*xb[0]*t(3,1,k+1) - xa[k]*xb[2]*t(1,1,k+1);
			G(1,2) += xa[k]*xb[1]*t(3,1,k+1) - xa[k]*xb[2]*t(2,1,k+1);
			G(2,2) += xa[k]*xb[0]*t(3,2,k+1) - xa[k]*xb[2]*t(1,2,k+1);
			G(3,2) += xa[k]*xb[1]*t(3,2,k+1) - xa[k]*xb[2]*t(2,2,k+1);
			
		}
	}
	else if(imageDontOnRechercheLePoint == 2) {
	
		for(int k = 0; k < 3; ++k) {
			
			G(0,0) += xa[k]*xb[2]*t(3,1,k+1) - xa[k]*xb[0]*t(3,3,k+1);
			G(2,0) += xa[k]*xb[2]*t(3,2,k+1) - xa[k]*xb[1]*t(3,3,k+1);
			
			G(1,1) += xa[k]*xb[2]*t(3,1,k+1) - xa[k]*xb[0]*t(3,3,k+1);
			G(3,1) += xa[k]*xb[2]*t(3,2,k+1) - xa[k]*xb[1]*t(3,3,k+1);
			
			G(0,2) += -xa[k]*xb[2]*t(1,1,k+1) + xa[k]*xb[0]*t(1,3,k+1);
			G(1,2) += -xa[k]*xb[2]*t(2,1,k+1) + xa[k]*xb[0]*t(2,3,k+1);
			G(2,2) += -xa[k]*xb[2]*t(1,2,k+1) + xa[k]*xb[1]*t(1,3,k+1);
			G(3,2) += -xa[k]*xb[2]*t(2,2,k+1) + xa[k]*xb[1]*t(2,3,k+1);
		}
	}
	else if(imageDontOnRechercheLePoint == 1) {
	
		for(int k = 0; k < 3; ++k) {
			
			G(0,k) = xa[0]*xb[2]*t(3,1,k+1) - xa[2]*xb[2]*t(1,1,k+1) - xa[0]*xb[0]*t(3,3,k+1) + xa[2]*xb[0]*t(1,3,k+1);
			G(1,k) = xa[1]*xb[2]*t(3,1,k+1) - xa[2]*xb[2]*t(2,1,k+1) - xa[1]*xb[0]*t(3,3,k+1) + xa[2]*xb[0]*t(2,3,k+1);
			G(2,k) = xa[0]*xb[2]*t(3,2,k+1) - xa[2]*xb[2]*t(1,2,k+1) - xa[0]*xb[1]*t(3,3,k+1) + xa[2]*xb[1]*t(1,3,k+1);
			G(3,k) =
		}
	}
	
	/*std::cout << "Matrice G" <<std::endl;
	std::cout << G <<std::endl;*/
	
	VectorXd b = VectorXd::Zero(4);
	
	JacobiSVD<MatrixXd> svdSurG(G, ComputeThinU | ComputeThinV);
	
	/*std::cout << "Les valeurs singulieres sont triées par ordre decroissant:" << std::endl << svdSurG.singularValues() << std::endl;
	std::cout << "Matrix V dernière colonne" << std::endl << svdSurG.matrixV().col(2) << std::endl;*/
	
	VectorXd xsol = svdSurG.matrixV().col(2);
	
	//On remet la coordonnée homogène à 1 pour avoir des résultats cohérents avec l'image
	xsol[0] = xsol[0]/xsol[2];
	xsol[1] = xsol[1]/xsol[2];
	xsol[2] = 1.0;
	
	return xsol;
}

